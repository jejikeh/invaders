// Copyright 2020 The Ebiten Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:build ignore

//kage:unit pixels
package main

const CellWidth float = 12.0  // must be at least 1
const CellHeight float = 12.0 // must be at least 1

func Fragment(_ vec4, sourceCoords vec2, _ vec4) vec4 {
	// find the origin of the cell we are working with
	cellOX := floor(sourceCoords.x/CellWidth) * CellWidth
	cellOY := floor(sourceCoords.y/CellHeight) * CellHeight

	// iterate the pixelization cell
	colorAcc := vec4(0.0) // color accumulator
	for y := 0.0; y < CellHeight; y += 1.0 {
		for x := 0.0; x < CellWidth; x += 1.0 {
			pixCoords := vec2(cellOX+x, cellOY+y)
			colorAcc += imageSrc0At(pixCoords)
		}
	}

	// divide the color to average it
	return colorAcc / (CellWidth * CellHeight)
}
